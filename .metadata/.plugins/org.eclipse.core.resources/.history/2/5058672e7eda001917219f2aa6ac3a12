package co.edu.uniquindio.hela.entidades;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * @author Mateo Henao R
 * Entidad Compra la cual contiene todo lo relevante a las compras realizadas por los usuarios
 * @version 1.0
 */

@Entity
@NamedQueries({
	/**
	 * Consulta la cual permite listar todos los productos registrados en la base de datos
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS, query = "select producto from Producto producto"),
	/**
	 * Consulta la cual permite listar todos los productos que se encuentran con fecha activa en la base de datos
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS_ACTIVOS, query = "select p from Producto p where p.fechaLimite >=  :fechaActual"),
	/**
	 * Consulta la cual permite listar todos los productos que se encuentran activos en la base de datos, y filtrarlos por categoria
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS_ACTIVOS_CATEGORIA, query = "select p from Producto p where (p.fechaLimite >=  :fechaActual) AND (p.categoria like ':c')"),
	/**
	 * Consulta la cual permite listar todos los productos que se encuentran vencidos "su fecha ya paso" registrados en la base de datos
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS_VENCIDOS, query = "select p from Producto p where p.fechaLimite <  :fechaActual"),
	/**
	 * Consulta la cual nos permite listar todos los productos registrados en la base de datos, por categoria esten o no activos
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS_CATEGORIA, query = "select p from Producto p where p.categoria like ':c'"),
	/**
	 * Consulta la cual nos permite listar los productos que ha insertado cierto usuario
	 */
	@NamedQuery(name = Producto.LISTAR_PRODUCTOS_USUARIO, query = "select p from Producto p where p.usuario.cedula =:cc")
	
})
public class Compra implements Serializable {

	//Constante que identifica la consulta que lista todos los productos registrados
	public static final String LISTAR_PRODUCTOS = "ListarProductos";
	//Constante que identifica la consulta que lista todos los productos de determinado usuario
	public static final String LISTAR_PRODUCTOS_USUARIO = "ListarProductosUsuario";


	/**
	 * Relaciones de la entidad Compra
	 */

	//Relacion de muchos a uno con usuario
	@ManyToOne
	private Usuario usuario;

	//Relacion de uno a muchos con la entidad de detalle compras
	@OneToMany(mappedBy = "compra")
	private List<DetalleCompra> DetalleCompras;

	/**
	 * Atributos de la entidad Compra
	 */

	/**
	 * Ref autoincrementable el cual identifica cada compra registrada en la base de datos
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "ref",nullable = false,unique = true )
	private int ref;

	/**
	 * fechaCompra la cual guarda la fecha en la que fue realizada una compra en la aplicacion
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "fechaCompra",nullable = false)
	private Date fechaCompra;

	/**
	 * metodo_pago enum, el cual contiene los distintos metodos de pago que acepta la plataforma
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "metodo_pago",nullable = false)
	private FormaPago metodo_pago;

	/**
	 * Total de toda la compra realizada por el ususario 
	 */
	@Column(name = "totalPago",nullable = false)
	private Double totalPago;


	private static final long serialVersionUID = 1L;


	public Compra() {
		super();
	}   
	public int getRef() {
		return this.ref;
	}

	public Date getFechaCompra() {
		return fechaCompra;
	}
	public void setFechaCompra(Date fechaCompra) {
		this.fechaCompra = fechaCompra;
	}
	public FormaPago getMetodo_pago() {
		return metodo_pago;
	}
	public void setMetodo_pago(FormaPago metodo_pago) {
		this.metodo_pago = metodo_pago;
	}
	public void setRef(int ref) {
		this.ref = ref;
	}
	public Usuario getUsuario() {
		return usuario;
	}
	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	public List<DetalleCompra> getDetalleCompras() {
		return DetalleCompras;
	}
	public void setDetalleCompras(List<DetalleCompra> detalleCompras) {
		DetalleCompras = detalleCompras;
	}
	public Double getTotalPago() {
		return totalPago;
	}
	public void setTotalPago(Double totalPago) {
		this.totalPago = totalPago;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ref;
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Compra other = (Compra) obj;
		if (ref != other.ref)
			return false;
		return true;
	}
	@Override
	public String toString() {
		return "Compra [usuario=" + usuario + ", DetalleCompras=" + DetalleCompras + ", ref=" + ref + ", fechaCompra="
				+ fechaCompra + ", metodo_pago=" + metodo_pago + ", totalPago=" + totalPago + "]";
	}

}
